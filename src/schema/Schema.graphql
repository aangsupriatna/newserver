 type Query {
    #  User Query
    user(id: ID!): User
    users: [User]

    # Project query
    project(id: ID!): Project
    projects: [Project]
}

 type Mutation {
    #  User mutation
    signin(input: UserLogin): Token
    refreshLogin(refreshToken: String): Token
    addUser(input: UserInput): User
    updateUser(input: UserInput): User
    deleteUser(id: ID): User

    #  Project mutation
    addProject(input: ProjectInput): Project
    editProject(input: ProjectInput): Project
    removeProject(id: ID): Project
}

# User type
type User {
    id: ID!
    username: String!
    email: String!
    password: String!
    isAdmin: Boolean
}

input UserInput{
    id: ID
    username: String
    email: String
    password: String
    isAdmin: Boolean
}

type Token {
    accessToken: String
    refreshToken: String
}

input UserLogin{
    email: String!
    password: String!
    expire: Boolean
}

# Project type
input ProjectInput {
    id: ID
    namaProyek: String
    bidang: String
    lokasi: String
    namaPemberiTugas: String
    alamatPemberiTugas: String
    tanggalKontrak: String
    nomorKontrak: String
    nilaiKontrak: String
    jv: Int
    jvWith: String
    tanggalBast: String
    nomorBast: String
}

type Project {
    id: ID
    namaProyek: String
    bidang: String
    lokasi: String
    namaPemberiTugas: String
    alamatPemberiTugas: String
    tanggalKontrak: String
    nomorKontrak: String
    nilaiKontrak: String
    jv: Int
    jvWith: String
    tanggalBast: String
    nomorBast: String
}